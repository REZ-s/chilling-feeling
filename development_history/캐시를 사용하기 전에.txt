# 캐시를 사용하기 전에.. 

서버1, 서버2, 사용자A, 사용자B 가 있다고 가정하자.

그러면, 클라이언트의 요청을 서버로 보냈을 때 
서버측에서 고려해야할 사항이 있다.
1. 균등한 부하분산 (로드밸런싱)
2. 라우팅 일관성 (해시값)
3. 데이터 정합성 (캐시와 DB)
4. 캐시 수명 : 캐시 수명은 사용자가 해당 api를 호출했을 경우 갱신되게 하면 된다.
5. 캐시 공유 : 공통 Redis에서 할 것인지, 각 서버별로 따로 갖고 있을 것인지

서버1에 트래픽이 몰렸을 경우, 
사용자A가 원래 통신하던 서버1가 아닌 서버2로 라우팅될 수 있다.
이 경우에 고려할 수 있는 상황은 아래와 같다.

[데이터가 변하지 않은 경우]
1. 사용자A에 대한 캐시를 서버1이 갖고 있는데, 서버2도 캐시를 생성한다.
2. 사용자A에 대한 캐시를 별도의공통시스템(Redis)이 갖고 있다면, 서버2도 아무 문제없다.
3. 사용자A에 대한 캐시를 서버1에서 서버2로 이동시킨다.
 
[데이터가 업데이트된 경우]
1. 사용자A에 대한 캐시를 서버1이 갖고 있는데, 이를 폐기하고 서버2에서 캐시를 생성한다.
2. 사용자A에 대한 캐시를 별도의공통시스템(Redis)이 갖고 있는데, 이를 폐기하고 다시 생성한다.
3. 데이터가 수정되는 시점에, 사용자A에 대한 캐시를 갖고 있는 서버1에서 캐시를 폐기하고 다시 생성한다.
4. 데이터가 수정되는 시점에, 사용자A에 대한 캐시를 갖고 있는 모든서버에서 캐시를 폐기하고 해당 서버에서 다시 생성한다.

등등등....


결론 : 
1. 공통 Redis를 이용해서 캐시를 관리한다.
2. 기본적으로 캐시 전략은 look aside + write around 으로 적용한다.
3. write 시 캐시 삭제를 통한 정합성 보장
4. 사용자가 일정 기간 해당 데이터를 조회하지 않으면 캐시를 삭제하며, 데이터를 조회하는 시점에서 다시 기간 갱신
+ 로드밸런싱에 대한것은 알아보는중

