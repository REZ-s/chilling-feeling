server:

  # Host
  address: ec2-3-38-94-0.ap-northeast-2.compute.amazonaws.com
  port: 8080

  # Data compression setting
  compression.enabled: true
  compression:
    mime-types: application/json, text/html, text/css, text/javascript, text/plain, image/png, image/gif, image/jpeg
    min-response-size: 2048

spring:

  # OAuth 2.0 setting (service providers)
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: "923239916479-qbapjsigagu5mbvu7guqqs3643nso5db.apps.googleusercontent.com"
            client-secret: "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"
            redirect-uri: "https://ec2-3-38-94-0.ap-northeast-2.compute.amazonaws.com:8080/login/oauth2/code/google"
            scope:
              - profile
              - email

          naver:
            client-id: "TjJt0twiPxhfV4WsYBeS"
            client-secret: "TA5xI9qbZu"
            client-name: "Naver"
            authorization-grant-type: "authorization_code"
            redirect-uri: "https://ec2-3-38-94-0.ap-northeast-2.compute.amazonaws.com:8080/login/oauth2/code/naver"
            scope:
              - name
              - email

          kakao:
            client-id: "679c6ed0d241269986930419cc626c80"
            client-secret: "KydBrslwvqdGanJ6H1tNiZWv7lkhdfvt"
            client-name: "Kakao"
            authorization-grant-type: "authorization_code"
            redirect-uri: "https://ec2-3-38-94-0.ap-northeast-2.compute.amazonaws.com:8080/login/oauth2/code/kakao"
            client-authentication-method: "POST"
            scope:
              - profile_nickname
              - account_email

        provider:
          naver:
            authorization-uri: "https://nid.naver.com/oauth2.0/authorize"
            token-uri: "https://nid.naver.com/oauth2.0/token"
            user-info-uri: "https://openapi.naver.com/v1/nid/me"
            user-name-attribute: "response"

          kakao:
            authorization-uri: "https://kauth.kakao.com/oauth/authorize"
            token-uri: "https://kauth.kakao.com/oauth/token"
            user-info-uri: "https://kapi.kakao.com/v2/user/me"
            user-name-attribute: "id"

  # DB setting
  datasource:
    hikari:
      jdbc-url: jdbc:mysql://cf-serivce-rds-mysql.cnajomgll26i.ap-northeast-2.rds.amazonaws.com:3306/cfdb?autoReconnect=true&useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=Asia/Seoul&useUnicode=true&characterEncoding=utf8
      username: admin
      password: sxdc5521!!
      driver-class-name: com.mysql.cj.jdbc.Driver

  sql:
    init:
      mode: never

  # JPA setting
  jpa:
    database: mysql
    database-platform: org.hibernate.dialect.MySQL8Dialect
    open-in-view: true

    hibernate:
      ddl-auto: none

    properties:
      hibernate:
        default_batch_fetch_size: 100
        dialect: org.hibernate.dialect.MySQL8Dialect

  # Server template engine setting
  thymeleaf:
    prefix: classpath:/templates/
    suffix: .html

  # Email Service setting
  mail:
    password: ehybxmouszbvqjjp
    username: nestler.jang@gmail.com
    host: smtp.gmail.com
    port: 465
    protocol: smtp
    properties:
      debug: true
      mail:
        smtp:
          auth: true
          starttls.enable: true
          starttls.required: true
          ssl.enable: true
          ssl.required: true
          ssl.trust: smtp.gmail.com
          socketFactory:
            port: 465
            class: javax.net.ssl.SSLSocketFactory
            fallback: false

# SMS setting
sms:
  coolsms:
    api-key: NCSCMFNPTSKXATB7
    api-secret: L9RADSCB7EE36ZNZGBYM3IEX8UGVU3UY
    host: 01073696639
    domain: https://api.coolsms.co.kr

# Log setting
#logging:
#  level:
#    org.springframework: debug
#    org.hibernate.SQL: debug
#    org.hibernate.type: trace
#    org.hibernate.type.descriptor.sql: trace

# App properties
app:
  auth:
    tokenSecret: jooloveSecretKeyForMyApplication
    tokenExpirationMsec: 864000000
  cors:
    allowedOrigins: https://ec2-3-38-94-0.ap-northeast-2.compute.amazonaws.com:3000, https://ec2-3-38-94-0.ap-northeast-2.compute.amazonaws.com:8080 # Comma separated list of allowed origins
  oauth2:
    # After successfully authenticating with the OAuth2 Provider,
    # we'll be generating an auth token for the user and sending the token to the
    # redirectUri mentioned by the client in the /oauth2/authorize request.
    # We're not using cookies because they won't work well in mobile clients.
    authorizedRedirectUris:
      - https://ec2-3-38-94-0.ap-northeast-2.compute.amazonaws.com:8080/oauth2/redirect

# JWT setting
joolove:
  app:
    jwtCookieName: jooloveJwt
    jwtRefreshCookieName: jooloveJwtRefresh
    jwtSecret: jooloveSecretKeyForMyApplication
    jwtExpirationMs: 3600000  # 1 hour
    jwtRefreshExpirationMs: 1209600000 # 14 days
